package au.gov.nsw.records.digitalarchive.action.identification;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import au.gov.nsw.records.digitalarchive.action.AbstractAction;
import au.gov.nsw.records.digitalarchive.action.wrapper.XenaWrapper;
import au.gov.nsw.records.digitalarchive.kernel.activerecord.Entry;
import au.gov.nsw.records.digitalarchive.kernel.activerecord.WorkflowCache;
import au.gov.nsw.records.digitalarchive.output.OutputWriter;
import au.gov.nsw.records.digitalarchive.output.XMLFileWriter;
import au.gov.nsw.records.digitalarchive.utils.StringHelper;
import au.gov.nsw.records.digitalarchive.utils.thread.CoreThreadFactory;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamOmitField;

/**
 * The file format identificator action using XENA library
 * @author wisanup
 * @see <a href="http://sourceforge.net/projects/xena/">XENA website</a>
 *
 */
@XStreamAlias("xenaIdentification")
public class XenaFileIdentificationAction  extends AbstractAction{
	
	private WorkflowCache cache;
	private static final Log log = LogFactory.getLog(XenaFileIdentificationAction.class);

	@XStreamOmitField
	private XenaWrapper xena;
	String path;
	
	/**
	 * Constructs the new instance of this class
	 * This should be used for testing purpose only
	 */
	public XenaFileIdentificationAction(){
		xena = new XenaWrapper();
	}
	
	@Override
	public void processAction() {

		if (path==null || path.isEmpty()){
			path = cache.getString(WorkflowCache.RECENTLOCATION);
		}
		
		try {
			for (Entry ent: (List<Entry>)cache.getAll(Entry.class)){
				createFileIdentificationFile(StringHelper.joinDirectoryString(path , ent.getString(Entry.NAME)), StringHelper.joinDirectoryString(path , ent.getString(Entry.NAME))  + ".format.xena.xml");
				log.info(String.format("Identification file created for [%s]", path + ent.getString(Entry.NAME)));
			}
			log.info(String.format("All identification files created for [%s]", workflowName));
		} catch (final Exception e) {
			log.error("Encountered an error while creating identification files",e);
			CoreThreadFactory.getCallBackExecutorService().execute(new Runnable() {
				@Override
				public void run() {
					listener.onActionError(XenaFileIdentificationAction.this, e.getMessage());
				}
			});
			return;
		}
		
		CoreThreadFactory.getCallBackExecutorService().execute(new Runnable() {
			@Override
			public void run() {
				log.info(String.format("Action [%s] executed for [%s] ", getName(), workflowName));
				listener.onActionFinished(XenaFileIdentificationAction.this);
			}
		});
	}
	
	/**
	 * Produce the format identification files of the given input files.
	 * The output file name will be automatically generated by {originalname}.format.xena.xml 
	 * @param files the files to be processed for file format identification
	 * @throws IOException
	 */
	public void createFileIdentificationFiles(List<String> files) throws IOException{
		for (String file: files){
			createFileIdentificationFile(file, file + ".format.xena.xml");
			log.info(String.format("Identification file created for [%s]", file));
		}
	}
	
	/**
	 * Produce the format identification file of the given input file.
	 * @param sourceFile the file to be processed for file format identification
	 * @param outputFile the file to be created 
	 * @throws IOException
	 */
	public void createFileIdentificationFile(String sourceFile, String outputFile) throws IOException{
		Map<String, String> valueMap = new HashMap<String, String>();
		valueMap.put("Content-Type", getFileIdentification(sourceFile));

		OutputWriter ow = new XMLFileWriter();
		ow.writeMetadata(valueMap, "xena", "", outputFile);
	}
	
	/**
	 * Get the file identification result of the given file
	 * @param filePath the file to be processed for file format identification 
	 * @return the identification result
	 * @throws IOException
	 */
	public String getFileIdentification(String filePath) throws IOException{
		return xena.getMostLikelyType(filePath);	
	}
	
	@Override
	public void prepare(WorkflowCache cache, int actionSetId) {
		super.prepare(cache, actionSetId);
		
		xena = new XenaWrapper();
		this.cache = cache;
		
	}
}
